name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18.x'

jobs:
  lint:
    name: Lint Code
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run ESLint
      run: npm run lint
      
    - name: Check Prettier formatting
      run: npx prettier --check "**/*.{js,ts,json,md}"

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        node-version: ['18.x', '20.x']
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ matrix.node-version }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run tests
      run: npm test
      env:
        NODE_ENV: test
        
    - name: Upload coverage reports
      if: matrix.node-version == '18.x'
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        fail_ci_if_error: false

  typescript-check:
    name: TypeScript Compile Check
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install TypeScript
      run: npm install -g typescript
      
    - name: Type check
      run: tsc --noEmit
      
    - name: Build TypeScript
      run: tsc --build

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run security audit
      run: npm audit --audit-level=moderate
      
    - name: Check for known vulnerabilities
      run: npx audit-ci --moderate

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, test, typescript-check, security-audit]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build TypeScript
      run: tsc --build
      
    - name: Create build artifact
      run: |
        mkdir -p build-artifacts
        cp -r dist/ build-artifacts/ 2>/dev/null || echo "No dist directory to copy"
        cp package*.json build-artifacts/
        cp *.js build-artifacts/ 2>/dev/null || echo "No JS files to copy"
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: build-artifacts/
        retention-days: 30

  integration-test:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    services:
      sqlite:
        image: alpine:latest
        options: >-
          --health-cmd "echo 'SQLite is file-based, no service needed'"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 3
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Create test database
      run: |
        mkdir -p database
        touch database/test.sqlite
        
    - name: Run integration tests
      run: npm test -- --testNamePattern="Integration"
      env:
        NODE_ENV: test
        DATABASE_PATH: './database/test.sqlite'

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    
    environment:
      name: staging
      url: https://staging.example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: ./build/
        
    - name: Deploy to staging
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, scp, docker build/push, etc.
        
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [integration-test]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    environment:
      name: production
      url: https://example.com
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v3
      with:
        name: build-artifacts-${{ github.sha }}
        path: ./build/
        
    - name: Deploy to production
      run: |
        echo "Deploying to production environment..."
        # Add your production deployment commands here
        
  notify:
    name: Notify Team
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
    - name: Notify on success
      if: needs.deploy-staging.result == 'success' || needs.deploy-production.result == 'success'
      run: |
        echo "Deployment successful!"
        # Add notification logic (Slack, email, etc.)
        
    - name: Notify on failure
      if: needs.deploy-staging.result == 'failure' || needs.deploy-production.result == 'failure'
      run: |
        echo "Deployment failed!"
        # Add failure notification logic